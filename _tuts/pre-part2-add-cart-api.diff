diff --git a/composer.json b/composer.json
index 662a8154..4d0a8a09 100644
--- a/composer.json
+++ b/composer.json
@@ -16,6 +16,7 @@
         "doctrine/orm": "^2.4.5",
         "nelmio/cors-bundle": "^2.1",
         "phpdocumentor/reflection-docblock": "^5.2",
+        "ramsey/uuid": "^4.1",
         "sensio/framework-extra-bundle": "^5.5",
         "symfony/asset": "5.1.*",
         "symfony/console": "5.1.*",
diff --git a/composer.lock b/composer.lock
index 522baacb..0b20c7b6 100644
--- a/composer.lock
+++ b/composer.lock
@@ -4,7 +4,7 @@
         "Read more about it at https://getcomposer.org/doc/01-basic-usage.md#installing-dependencies",
         "This file is @generated automatically"
     ],
-    "content-hash": "872330c359144bd019a96e5780a5c494",
+    "content-hash": "1f6f9cda99c27071d0cb9ec1a115a555",
     "packages": [
         {
             "name": "api-platform/core",
@@ -162,6 +162,62 @@
             ],
             "time": "2021-01-22T10:36:37+00:00"
         },
+        {
+            "name": "brick/math",
+            "version": "0.9.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/brick/math.git",
+                "reference": "283a40c901101e66de7061bd359252c013dcc43c"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/brick/math/zipball/283a40c901101e66de7061bd359252c013dcc43c",
+                "reference": "283a40c901101e66de7061bd359252c013dcc43c",
+                "shasum": ""
+            },
+            "require": {
+                "ext-json": "*",
+                "php": "^7.1|^8.0"
+            },
+            "require-dev": {
+                "php-coveralls/php-coveralls": "^2.2",
+                "phpunit/phpunit": "^7.5.15|^8.5",
+                "vimeo/psalm": "^3.5"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Brick\\Math\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "description": "Arbitrary-precision arithmetic library",
+            "keywords": [
+                "Arbitrary-precision",
+                "BigInteger",
+                "BigRational",
+                "arithmetic",
+                "bigdecimal",
+                "bignum",
+                "brick",
+                "math"
+            ],
+            "support": {
+                "issues": "https://github.com/brick/math/issues",
+                "source": "https://github.com/brick/math/tree/master"
+            },
+            "funding": [
+                {
+                    "url": "https://tidelift.com/funding/github/packagist/brick/math",
+                    "type": "tidelift"
+                }
+            ],
+            "time": "2020-08-18T23:57:15+00:00"
+        },
         {
             "name": "composer/package-versions-deprecated",
             "version": "1.11.99",
@@ -2502,6 +2558,171 @@
             },
             "time": "2020-03-23T09:12:05+00:00"
         },
+        {
+            "name": "ramsey/collection",
+            "version": "1.1.0",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ramsey/collection.git",
+                "reference": "044184884e3c803e4cbb6451386cb71562939b18"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ramsey/collection/zipball/044184884e3c803e4cbb6451386cb71562939b18",
+                "reference": "044184884e3c803e4cbb6451386cb71562939b18",
+                "shasum": ""
+            },
+            "require": {
+                "php": "^7.2 || ^8"
+            },
+            "require-dev": {
+                "captainhook/captainhook": "^5.3",
+                "dealerdirect/phpcodesniffer-composer-installer": "^0.7.0",
+                "ergebnis/composer-normalize": "^2.6",
+                "fzaninotto/faker": "^1.5",
+                "hamcrest/hamcrest-php": "^2",
+                "jangregor/phpstan-prophecy": "^0.6",
+                "mockery/mockery": "^1.3",
+                "phpstan/extension-installer": "^1",
+                "phpstan/phpstan": "^0.12.32",
+                "phpstan/phpstan-mockery": "^0.12.5",
+                "phpstan/phpstan-phpunit": "^0.12.11",
+                "phpunit/phpunit": "^8.5",
+                "psy/psysh": "^0.10.4",
+                "slevomat/coding-standard": "^6.3",
+                "squizlabs/php_codesniffer": "^3.5",
+                "vimeo/psalm": "^3.12.2"
+            },
+            "type": "library",
+            "autoload": {
+                "psr-4": {
+                    "Ramsey\\Collection\\": "src/"
+                }
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "authors": [
+                {
+                    "name": "Ben Ramsey",
+                    "email": "ben@benramsey.com",
+                    "homepage": "https://benramsey.com"
+                }
+            ],
+            "description": "A PHP 7.2+ library for representing and manipulating collections.",
+            "keywords": [
+                "array",
+                "collection",
+                "hash",
+                "map",
+                "queue",
+                "set"
+            ],
+            "support": {
+                "issues": "https://github.com/ramsey/collection/issues",
+                "source": "https://github.com/ramsey/collection/tree/1.1.0"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/ramsey",
+                    "type": "github"
+                }
+            ],
+            "time": "2020-08-11T00:57:21+00:00"
+        },
+        {
+            "name": "ramsey/uuid",
+            "version": "4.1.1",
+            "source": {
+                "type": "git",
+                "url": "https://github.com/ramsey/uuid.git",
+                "reference": "cd4032040a750077205918c86049aa0f43d22947"
+            },
+            "dist": {
+                "type": "zip",
+                "url": "https://api.github.com/repos/ramsey/uuid/zipball/cd4032040a750077205918c86049aa0f43d22947",
+                "reference": "cd4032040a750077205918c86049aa0f43d22947",
+                "shasum": ""
+            },
+            "require": {
+                "brick/math": "^0.8 || ^0.9",
+                "ext-json": "*",
+                "php": "^7.2 || ^8",
+                "ramsey/collection": "^1.0",
+                "symfony/polyfill-ctype": "^1.8"
+            },
+            "replace": {
+                "rhumsaa/uuid": "self.version"
+            },
+            "require-dev": {
+                "codeception/aspect-mock": "^3",
+                "dealerdirect/phpcodesniffer-composer-installer": "^0.6.2 || ^0.7.0",
+                "doctrine/annotations": "^1.8",
+                "goaop/framework": "^2",
+                "mockery/mockery": "^1.3",
+                "moontoast/math": "^1.1",
+                "paragonie/random-lib": "^2",
+                "php-mock/php-mock-mockery": "^1.3",
+                "php-mock/php-mock-phpunit": "^2.5",
+                "php-parallel-lint/php-parallel-lint": "^1.1",
+                "phpbench/phpbench": "^0.17.1",
+                "phpstan/extension-installer": "^1.0",
+                "phpstan/phpstan": "^0.12",
+                "phpstan/phpstan-mockery": "^0.12",
+                "phpstan/phpstan-phpunit": "^0.12",
+                "phpunit/phpunit": "^8.5",
+                "psy/psysh": "^0.10.0",
+                "slevomat/coding-standard": "^6.0",
+                "squizlabs/php_codesniffer": "^3.5",
+                "vimeo/psalm": "3.9.4"
+            },
+            "suggest": {
+                "ext-bcmath": "Enables faster math with arbitrary-precision integers using BCMath.",
+                "ext-ctype": "Enables faster processing of character classification using ctype functions.",
+                "ext-gmp": "Enables faster math with arbitrary-precision integers using GMP.",
+                "ext-uuid": "Enables the use of PeclUuidTimeGenerator and PeclUuidRandomGenerator.",
+                "paragonie/random-lib": "Provides RandomLib for use with the RandomLibAdapter",
+                "ramsey/uuid-doctrine": "Allows the use of Ramsey\\Uuid\\Uuid as Doctrine field type."
+            },
+            "type": "library",
+            "extra": {
+                "branch-alias": {
+                    "dev-master": "4.x-dev"
+                }
+            },
+            "autoload": {
+                "psr-4": {
+                    "Ramsey\\Uuid\\": "src/"
+                },
+                "files": [
+                    "src/functions.php"
+                ]
+            },
+            "notification-url": "https://packagist.org/downloads/",
+            "license": [
+                "MIT"
+            ],
+            "description": "A PHP library for generating and working with universally unique identifiers (UUIDs).",
+            "homepage": "https://github.com/ramsey/uuid",
+            "keywords": [
+                "guid",
+                "identifier",
+                "uuid"
+            ],
+            "support": {
+                "issues": "https://github.com/ramsey/uuid/issues",
+                "rss": "https://github.com/ramsey/uuid/releases.atom",
+                "source": "https://github.com/ramsey/uuid"
+            },
+            "funding": [
+                {
+                    "url": "https://github.com/ramsey",
+                    "type": "github"
+                }
+            ],
+            "time": "2020-08-18T17:17:46+00:00"
+        },
         {
             "name": "sensio/framework-extra-bundle",
             "version": "v5.6.1",
diff --git a/src/ApiPlatform/CartDataPersister.php b/src/ApiPlatform/CartDataPersister.php
new file mode 100644
index 00000000..f249b337
--- /dev/null
+++ b/src/ApiPlatform/CartDataPersister.php
@@ -0,0 +1,45 @@
+<?php
+
+namespace App\ApiPlatform;
+
+use ApiPlatform\Core\DataPersister\DataPersisterInterface;
+use App\Entity\Cart;
+use Symfony\Component\HttpFoundation\Session\SessionInterface;
+
+class CartDataPersister implements DataPersisterInterface
+{
+    private $session;
+
+    public function __construct(SessionInterface $session)
+    {
+        $this->session = $session;
+    }
+
+    public function supports($data): bool
+    {
+        return $data instanceof Cart;
+    }
+
+    /**
+     * @param Cart $cart
+     */
+    public function persist($cart)
+    {
+        $this->session->set(self::getKey($cart->getId()), $cart);
+        $this->session->set('_cart_id', $cart->getId());
+    }
+
+    /**
+     * @param Cart $cart
+     */
+    public function remove($cart)
+    {
+        $this->session->remove(self::getKey($cart->getId()));
+        $this->session->remove('_cart_id');
+    }
+
+    public static function getKey(string $uuid)
+    {
+        return sprintf('_cart_%s', $uuid);
+    }
+}
diff --git a/src/ApiPlatform/CartDataProvider.php b/src/ApiPlatform/CartDataProvider.php
new file mode 100644
index 00000000..ee259b7f
--- /dev/null
+++ b/src/ApiPlatform/CartDataProvider.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace App\ApiPlatform;
+
+use ApiPlatform\Core\DataProvider\ItemDataProviderInterface;
+use ApiPlatform\Core\DataProvider\RestrictedDataProviderInterface;
+use App\Entity\Cart;
+use Symfony\Component\HttpFoundation\Session\SessionInterface;
+use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
+
+class CartDataProvider implements ItemDataProviderInterface, RestrictedDataProviderInterface
+{
+    private $session;
+
+    public function __construct(SessionInterface $session)
+    {
+        $this->session = $session;
+    }
+
+    public function supports(string $resourceClass, string $operationName = null, array $context = []): bool
+    {
+        return $resourceClass === Cart::class;
+    }
+
+    public function getItem(string $resourceClass, $id, string $operationName = null, array $context = [])
+    {
+        $key = CartDataPersister::getKey($id);
+        if (!$this->session->has($key)) {
+            throw new NotFoundHttpException('Cart not found');
+        }
+
+        return clone $this->session->get($key);
+    }
+}
diff --git a/src/DataFixtures/AppFixtures.php b/src/DataFixtures/AppFixtures.php
index f08005e9..317c9cd1 100644
--- a/src/DataFixtures/AppFixtures.php
+++ b/src/DataFixtures/AppFixtures.php
@@ -5,12 +5,21 @@ namespace App\DataFixtures;
 use App\Entity\Category;
 use App\Entity\Color;
 use App\Entity\Product;
+use App\Entity\User;
 use Doctrine\Bundle\FixturesBundle\Fixture;
 use Doctrine\Persistence\ObjectManager;
 use Symfony\Component\Filesystem\Filesystem;
+use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
 
 class AppFixtures extends Fixture
 {
+    private $passwordEncoder;
+
+    public function __construct(UserPasswordEncoderInterface $passwordEncoder)
+    {
+        $this->passwordEncoder = $passwordEncoder;
+    }
+
     public function load(ObjectManager $manager)
     {
         $colorRed = new Color('red', 'ff0000');
@@ -72,6 +81,12 @@ class AppFixtures extends Fixture
         $fs->mirror(__DIR__.'/uploads', $target);
         $fs->chmod($target, 0777);
 
+        $user = new User();
+        $user->setEmail('shopper@example.com');
+        $user->setPassword($this->passwordEncoder->encodePassword($user, 'buy'));
+
+        $manager->persist($user);
+
         $manager->flush();
     }
 
diff --git a/src/Entity/Cart.php b/src/Entity/Cart.php
new file mode 100644
index 00000000..c4417364
--- /dev/null
+++ b/src/Entity/Cart.php
@@ -0,0 +1,80 @@
+<?php
+
+namespace App\Entity;
+
+use ApiPlatform\Core\Annotation\ApiProperty;
+use ApiPlatform\Core\Annotation\ApiResource;
+use Ramsey\Uuid\Uuid;
+use Symfony\Component\Serializer\Annotation\Groups;
+
+/**
+ * @ApiResource(
+ *     normalizationContext={"groups"="cart:read"},
+ *     denormalizationContext={"groups"="cart:write"},
+ *     collectionOperations={"post"},
+ *     itemOperations={
+ *          "get"={
+ *          },
+ *          "put"={
+ *          },
+ *          "delete"={
+ *          },
+ *     }
+ * )
+ */
+class Cart
+{
+    /**
+     * @ApiProperty(identifier=true)
+     */
+    private $id;
+
+    /**
+     * @var CartItem[]
+     * @Groups({"cart:read", "cart:write"})
+     */
+    private $items = [];
+
+    public function __construct()
+    {
+        $this->id = (Uuid::uuid4())->toString();
+    }
+
+    public function getId(): string
+    {
+        return $this->id;
+    }
+
+    /**
+     * @return CartItem[]|array
+     */
+    public function getItems(): array
+    {
+        return $this->items;
+    }
+
+    public function addItem(CartItem $cartItem)
+    {
+        foreach ($this->items as $key => $item) {
+            if ($cartItem->matches($item)) {
+                $this->items[$key] = $cartItem;
+
+                return;
+            }
+        }
+
+        $this->items[] = $cartItem;
+    }
+
+    public function removeItem(CartItem $cartItem)
+    {
+        foreach ($this->items as $key => $item) {
+            if ($cartItem->matches($item)) {
+                unset($this->items[$key]);
+                $this->items = array_values($this->items);
+
+                return;
+            }
+        }
+    }
+}
diff --git a/src/Entity/CartItem.php b/src/Entity/CartItem.php
new file mode 100644
index 00000000..0d38ca0a
--- /dev/null
+++ b/src/Entity/CartItem.php
@@ -0,0 +1,62 @@
+<?php
+
+namespace App\Entity;
+
+use Symfony\Component\Serializer\Annotation\Groups;
+
+class CartItem
+{
+    /**
+     * @Groups({"cart:write", "cart:read"})
+     */
+    private $product;
+
+    /**
+     * @Groups({"cart:write", "cart:read"})
+     */
+    private $color;
+
+    /**
+     * @Groups({"cart:write", "cart:read"})
+     */
+    private $quantity;
+
+    /**
+     * @param $product
+     * @param $color
+     */
+    public function __construct(Product $product, Color $color = null)
+    {
+        $this->product = $product;
+        $this->color = $color;
+    }
+
+
+    public function getProduct(): Product
+    {
+        return $this->product;
+    }
+
+    public function getColor(): ?Color
+    {
+        return $this->color;
+    }
+
+    public function getQuantity(): int
+    {
+        return $this->quantity;
+    }
+
+    public function setQuantity(int $quantity)
+    {
+        $this->quantity = $quantity;
+    }
+
+    public function matches(CartItem $cartItem)
+    {
+        $thisKey = sprintf('%s_%s', $this->getProduct()->getId(), $this->getColor() ? $this->getColor()->getId() : 'no_color');
+        $thatKey = sprintf('%s_%s', $cartItem->getProduct()->getId(), $cartItem->getColor() ? $cartItem->getColor()->getId() : 'no_color');
+
+        return $thisKey === $thatKey;
+    }
+}
diff --git a/src/Serializer/ProductNormalizer.php b/src/Serializer/ProductNormalizer.php
index 204a128d..783aa6f4 100644
--- a/src/Serializer/ProductNormalizer.php
+++ b/src/Serializer/ProductNormalizer.php
@@ -49,10 +49,15 @@ class ProductNormalizer implements ContextAwareNormalizerInterface, CacheableSup
         $context[self::ALREADY_CALLED] = true;
         $data = $this->normalizer->normalize($object, $format, $context);
 
+        // for embedded IRI situations
+        if (is_string($data)) {
+            return $data;
+        }
+
         // add a fake image field
         $data['image'] = $this->assetPackages
             ->getUrl('uploads/products/'.$object->getImageFilename());
 
         return $data;
     }
-}
\ No newline at end of file
+}
diff --git a/src/Twig/SerializerExtension.php b/src/Twig/SerializerExtension.php
index 97f810b7..79204708 100644
--- a/src/Twig/SerializerExtension.php
+++ b/src/Twig/SerializerExtension.php
@@ -2,6 +2,7 @@
 
 namespace App\Twig;
 
+use ApiPlatform\Core\Api\IriConverterInterface;
 use Twig\Extension\AbstractExtension;
 use Twig\TwigFilter;
 use Symfony\Component\Serializer\SerializerInterface;
@@ -9,16 +10,19 @@ use Symfony\Component\Serializer\SerializerInterface;
 class SerializerExtension extends AbstractExtension
 {
     private $serializer;
+    private $iriConverter;
 
-    public function __construct(SerializerInterface $serializer)
+    public function __construct(SerializerInterface $serializer, IriConverterInterface $iriConverter)
     {
         $this->serializer = $serializer;
+        $this->iriConverter = $iriConverter;
     }
 
     public function getFilters(): array
     {
         return [
             new TwigFilter('jsonld', [$this, 'serializeToJsonLd'], ['is_safe' => ['html']]),
+            new TwigFilter('iri', [$this, 'convertToIri'], ['is_safe' => ['html']]),
         ];
     }
 
@@ -26,4 +30,9 @@ class SerializerExtension extends AbstractExtension
     {
         return $this->serializer->serialize($data, 'jsonld');
     }
+
+    public function convertToIri(object $item): string
+    {
+        return $this->iriConverter->getIriFromItem($item);
+    }
 }
diff --git a/symfony.lock b/symfony.lock
index 3552baf3..cf4f4f0a 100644
--- a/symfony.lock
+++ b/symfony.lock
@@ -16,6 +16,9 @@
             "./src/Entity/.gitignore"
         ]
     },
+    "brick/math": {
+        "version": "0.9.1"
+    },
     "doctrine/annotations": {
         "version": "1.0",
         "recipe": {
@@ -167,6 +170,12 @@
     "psr/log": {
         "version": "1.1.3"
     },
+    "ramsey/collection": {
+        "version": "1.1.0"
+    },
+    "ramsey/uuid": {
+        "version": "4.1.1"
+    },
     "sensio/framework-extra-bundle": {
         "version": "5.2",
         "recipe": {
diff --git a/templates/base.html.twig b/templates/base.html.twig
index 53b0297d..102b46d1 100644
--- a/templates/base.html.twig
+++ b/templates/base.html.twig
@@ -58,6 +58,13 @@
         </p>
 
         {% block javascripts %}
+            <script>
+                {% if app.session.has('_cart_id') %}
+                    window.cartIri = '{{ app.session.get('_cart_'~app.session.get('_cart_id'))|iri }}';
+                {% else %}
+                    window.cartIri = null;
+                {% endif %}
+            </script>
             {{ encore_entry_script_tags('app') }}
         {% endblock %}
     </body>
